(function(global,factory){if(typeof exports==="object"&&typeof module!=="undefined"){factory(exports)}else if(typeof define==="function"&&define["amd"]){define(["exports"],factory)}else{factory(global.ran=global["ran"]||{})}})(this,function(exports){"use strict";function _sum(arr,pow=1){if(pow!==1){return arr.reduce((sum,d)=>{return sum+Math.pow(d,pow)},0)}else{return arr.reduce((sum,d)=>{return sum+d},0)}}function _r(min,max){return min<max?Math.random()*(max-min)+min:Math.random()*(min-max)+max}function _some(generator,k=1){if(k<2)return generator();else{return Array.from({length:k},()=>generator())}}let linalg=function(){class Vector{constructor(arg){if(typeof arg==="number"){this._v=new Array(arg).fill(0);this._v[0]=1}else if(Array.isArray(arg)){this._v=arg}else if(typeof arg==="object"&&Array.isArray(arg.v)){this._v=arg.v}else{this._v=[1,0,0]}}v(){return this._v}mult(s){return new Vector(this._v.map(d=>d*s))}add(vec){let v=vec.v();return new Vector(this._v.map((d,i)=>d+v[i]))}dot(vec){let v=vec.v();return this._v.reduce((sum,d,i)=>sum+d*v[i],0)}}class Matrix{constructor(arg){if(typeof arg==="number"){this._m=Array.from({length:arg},()=>new Array(arg).fill(0));for(let i=0;i<arg;i++){this._m[i][i]=1}}else if(Array.isArray(arg)){this._m=arg}else if(typeof arg==="object"&&Array.isArray(arg.m)){this._m=arg.m}else{this._m=[[1,0,0],[0,1,0],[0,0,1]]}}m(){return this._m.map(d=>d.slice())}ij(i,j,s){if(s!==undefined){this._m[i][j]=s}else{return this._m[i][j]}}t(){let n=this._m.length,r=new Matrix(n);for(let i=0;i<n;i++){for(let j=0;j<n;j++){r.ij(i,j,this._m[j][i])}}return r}f(func){return new Matrix(this._m.map(row=>row.map(d=>func(d))))}scale(s){return this.f(x=>x*s)}add(mat){let m=mat.m();return new Matrix(this._m.map((row,i)=>row.map((d,j)=>d+m[i][j])))}mult(mat){let m=mat.m();let n=this._m.length;let r=new Matrix(n);for(let i=0;i<n;i++){for(let j=0;j<n;j++){let rij=0;for(let k=0;k<n;k++){rij+=this.ij(i,k)*m[k][j]}r.ij(i,j,rij)}}return r}act(vec){return new Vector(this._m.map(d=>vec.dot(new Vector(d))))}ldl(){let n=this._m.length,D=new Matrix(n),L=new Matrix(n);for(let j=0;j<n;j++){let dj=this.ij(j,j);for(let k=0;k<j;k++){dj-=D.ij(k,k)*L.ij(j,k)*L.ij(j,k)}D.ij(j,j,dj);for(let i=n-1;i>j;i--){let lij=this.ij(i,j);for(let k=0;k<j;k++){lij-=D.ij(k,k)*L.ij(i,k)*L.ij(j,k)}L.ij(i,j,lij/dj)}}return{D:D,L:L}}}return{Vector:Vector,Matrix:Matrix}}();let special=function(){const _MAX_ITERATIONS=100;const _EPSILON=1e-10;let gamma=function(){const _p=[676.5203681218851,-1259.1392167224028,771.3234287776531,-176.6150291621406,12.507343278686905,-.13857109526572012,9984369578019572e-21,1.5056327351493116e-7];function _gamma(z){let y=0;if(z<.5){y=Math.PI/(Math.sin(Math.PI*z)*_gamma(1-z))}else{z--;let x=.9999999999998099,l=_p.length;_p.forEach((p,i)=>{x+=p/(z+i+1);let t=z+l-.5;y=Math.sqrt(2*Math.PI)*Math.pow(t,z+.5)*Math.exp(-t)*x})}return y}return _gamma}();let gammaLn=function(){const _p=[76.18009172947146,-86.50532032941678,24.01409824083091,-1.231739572450155,.001208650973866179,-5395239384953e-18];return function(z){let x=z,y=z,tmp=x+5.5;tmp=(x+.5)*Math.log(tmp)-tmp;let ser=1.000000000190015;for(let j=0;j<6;j++){y++;ser+=_p[j]/y}return tmp+Math.log(2.5066282746310007*ser/x)}}();let gammaLowerIncomplete=function(){const _DELTA=1e-30;function _gliSeries(s,x){if(x<0){return 0}else{let si=s,y=1/s,f=1/s;for(let i=0;i<_MAX_ITERATIONS;i++){si++;y*=x/si;f+=y;if(y<f*_EPSILON)break}return Math.exp(-x)*Math.pow(x,s)*f}}function _guiContinuedFraction(s,x){let b=x+1-s,c=1/_DELTA,d=1/b,f=d,fi,y;for(let i=1;i<_MAX_ITERATIONS;i++){fi=i*(s-i);b+=2;d=fi*d+b;if(Math.abs(d)<_DELTA)d=_DELTA;d=1/d;c=b+fi/c;if(Math.abs(c)<_DELTA)c=_DELTA;y=c*d;f*=y;if(Math.abs(y-1)<_EPSILON)break}return Math.exp(-x)*Math.pow(x,s)*f}return function(s,x){return x<s+1?_gliSeries(s,x):gamma(s)-_guiContinuedFraction(s,x)}}();let betaIncomplete=function(){const _FPMIN=1e-30;function _biContinuedFraction(a,b,x){let qab=a+b,qap=a+1,qam=a-1,c=1,d=1-qab*x/qap;if(Math.abs(d)<_FPMIN)d=_FPMIN;d=1/d;let h=d;for(let i=1;i<_MAX_ITERATIONS;i++){let m2=2*i,aa=i*(b-i)*x/((qam+m2)*(a+m2));d=1+aa*d;if(Math.abs(d)<_FPMIN)d=_FPMIN;c=1+aa/c;if(Math.abs(c)<_FPMIN)c=_FPMIN;d=1/d;h*=d*c;aa=-(a+i)*(qab+i)*x/((a+m2)*(qap+m2));d=1+aa*d;if(Math.abs(d)<_FPMIN)d=_FPMIN;c=1+aa/c;if(Math.abs(c)<_FPMIN)c=_FPMIN;d=1/d;let del=d*c;h*=del;if(Math.abs(del-1)<_EPSILON)break}return h}return function(a,b,x){let bt=x<=0||x>=1?0:Math.exp(gammaLn(a+b)-gammaLn(a)-gammaLn(b)+a*Math.log(x)+b*Math.log(1-x));return x<(a+1)/(a+b+2)?bt*_biContinuedFraction(a,b,x)/a:1-bt*_biContinuedFraction(b,a,1-x)/b}}();let erf=function(){const _p=[-1.26551223,1.00002368,.37409196,.09678418,-.18628806,.27886807,-1.13520398,1.48851587,-.82215223,.17087277];return function(x){let t=1/(1+.5*Math.abs(x)),tp=1,sum=0;_p.forEach(p=>{sum+=p*tp;tp*=t});let tau=t*Math.exp(sum-x*x);return x<0?tau-1:1-tau}}();return{gamma:gamma,gammaLn:gammaLn,gammaLowerIncomplete:gammaLowerIncomplete,betaIncomplete:betaIncomplete,erf:erf}}();let core=function(){function float(min,max,n){if(arguments.length===0)return _r(0,1);if(arguments.length===1)return _r(0,min);return _some(()=>_r(min,max),n)}function int(min,max,n){if(arguments.length===1)return Math.floor(_r(0,min+1));return _some(()=>Math.floor(_r(min,max+1)),n)}function choice(values,n){if(values===null||values===undefined||values.length===0)return null;return _some(()=>values[Math.floor(_r(0,values.length))],n)}function char(string,n){if(string===null||string===undefined||string.length===0)return null;return _some(()=>string.charAt(Math.floor(_r(0,string.length))),n)}function shuffle(values){let i,tmp,l=values.length;while(l){i=Math.floor(Math.random()*l--);tmp=values[l];values[l]=values[i];values[i]=tmp}return values}function coin(head,tail,p,n){let prob=typeof p==="number"?p:.5;return _some(()=>Math.random()<prob?head:tail,n)}return{float:float,int:int,choice:choice,char:char,shuffle:shuffle,coin:coin}}();let dist=function(){const _CHI_TABLE_LO=[0,7.879,10.597,12.838,14.86,16.75,18.548,20.278,21.955,23.589,25.188,26.757,28.3,29.819,31.319,32.801,34.267,35.718,37.156,38.582,39.997,41.401,42.796,44.181,45.559,46.928,48.29,49.645,50.993,52.336,53.672,55.003,56.328,57.648,58.964,60.275,61.581,62.883,64.181,65.476,66.766,68.053,69.336,70.616,71.893,73.166,74.437,75.704,76.969,78.231,79.49,80.747,82.001,83.253,84.502,85.749,86.994,88.236,89.477,90.715,91.952,93.186,94.419,95.649,96.878,98.105,99.33,100.554,101.776,102.996,104.215,105.432,106.648,107.862,109.074,110.286,111.495,112.704,113.911,115.117,116.321,117.524,118.726,119.927,121.126,122.325,123.522,124.718,125.913,127.106,128.299,129.491,130.681,131.871,133.059,134.247,135.433,136.619,137.803,138.987,140.169,141.351,142.532,143.712,144.891,146.07,147.247,148.424,149.599,150.774,151.948,153.122,154.294,155.466,156.637,157.808,158.977,160.146,161.314,162.481,163.648,164.814,165.98,167.144,168.308,169.471,170.634,171.796,172.957,174.118,175.278,176.438,177.597,178.755,179.913,181.07,182.226,183.382,184.538,185.693,186.847,188.001,189.154,190.306,191.458,192.61,193.761,194.912,196.062,197.211,198.36,199.509,200.657,201.804,202.951,204.098,205.244,206.39,207.535,208.68,209.824,210.968,212.111,213.254,214.396,215.539,216.68,217.821,218.962,220.102,221.242,222.382,223.521,224.66,225.798,226.936,228.074,229.211,230.347,231.484,232.62,233.755,234.891,236.026,237.16,238.294,239.428,240.561,241.694,242.827,243.959,245.091,246.223,247.354,248.485,249.616,250.746,251.876,253.006,254.135,255.264,256.393,257.521,258.649,259.777,260.904,262.031,263.158,264.285,265.411,266.537,267.662,268.788,269.912,271.037,272.162,273.286,274.409,275.533,276.656,277.779,278.902,280.024,281.146,282.268,283.39,284.511,285.632,286.753,287.874,288.994,290.114,291.234,292.353,293.472,294.591,295.71,296.828,297.947,299.065,300.182,301.3,302.417,303.534,304.651,305.767,306.883,307.999,309.115,310.231,311.346];const _CHI_TABLE_HI=[366.844,421.9,476.606,531.026,585.207,639.183,692.982,746.625,800.131,853.514,906.786,959.957,1013.036,1066.031,1118.948];function _normal(mu,sigma){let u=Math.random(),v=Math.random();return sigma*Math.sqrt(-2*Math.log(u))*Math.cos(2*Math.PI*v)+mu}function _gamma(alpha,beta){if(alpha>1){let d=alpha-1/3,c=1/Math.sqrt(9*d),Z,V,U;while(true){Z=_normal(0,1);if(Z>-1/c){V=Math.pow(1+c*Z,3);U=Math.random();if(Math.log(U)<.5*Z*Z+d*(1-V+Math.log(V)))return d*V/beta}}}else{return _gamma(alpha+1,beta)*Math.pow(Math.random(),1/alpha)}}function _chiTest(values,pmf,c){let p={};values.forEach(function(v){p[v]=p[v]?p[v]+1:1});let chi2=0,n=values.length;for(let x in p){let m=pmf(parseInt(x))*n;chi2+=Math.pow(p[x]-m,2)/m}let df=Math.max(1,Object.keys(p).length-c-1),crit=df<=250?_CHI_TABLE_LO[df]:_CHI_TABLE_HI[Math.floor(df/50)];return{statistics:chi2,passed:chi2<=crit}}function _ksTest(values,cdf){values.sort((a,b)=>a-b);let D=0;for(let i=0;i<values.length;i++){D=Math.max(D,Math.abs((i+1)/values.length-cdf(values[i])))}return{statistics:D,passed:D<=1.628/Math.sqrt(values.length)}}class Distribution{constructor(type,k){this.type=type;this.k=k;this.p=[];this.c=[]}_generator(){}_pdf(){}_cdf(){}sample(n){return _some(()=>this._generator(),n)}pdf(x){return this._pdf(x)}cdf(x){return this._cdf(x)}survival(x){return 1-this._cdf(x)}hazard(x){return this._pdf(x)/this.survival(x)}cHazard(x){return-Math.log(this.survival(x))}lnPdf(x){return Math.log(this._pdf(x))}L(data){return data.reduce((sum,d)=>sum+this.lnPdf(d),0)}test(values){return this.type==="discrete"?_chiTest(values,x=>this._pdf(x),this.k):_ksTest(values,x=>this._cdf(x))}}class Bernoulli extends Distribution{constructor(p){super("discrete",arguments.length);this.p={p:p}}_generator(){return Math.random()<this.p.p?1:0}_pdf(x){return parseInt(x)===1?this.p.p:1-this.p.p}_cdf(x){return x<0?0:parseInt(x)>=1?1:1-this.p.p}}class Beta extends Distribution{constructor(alpha,beta){super("continuous",arguments.length);this.p={alpha:alpha,beta:beta};this.c=[Math.exp(special.gammaLn(alpha)+special.gammaLn(beta)-special.gammaLn(alpha+beta))]}_generator(){let x=_gamma(this.p.alpha,1),y=_gamma(this.p.beta,1);return x/(x+y)}_pdf(x){return Math.pow(x,this.p.alpha-1)*Math.pow(1-x,this.p.beta-1)/this.c[0]}_cdf(x){return x<=0?0:x>=1?1:special.betaIncomplete(this.p.alpha,this.p.beta,x)}}class Binomial extends Distribution{constructor(n,p){super("continuous",arguments.length);let pp=p<=.5?p:1-p;this.p={n:n,p:p};this.c=[pp,n*pp]}_generator(){if(this.p.n<25){let b=0;for(let i=1;i<=this.p.n;i++)if(Math.random()<this.c[0])b++;return this.c[0]===this.p.p?b:this.p.n-b}else if(this.c[1]<1){let lambda=Math.exp(-this.c[1]),t=1,i=0;for(i=0;i<=this.p.n;i++){t*=Math.random();if(t<lambda)break}let b=i<=this.p.n?i:this.p.n;return this.c[0]===this.p.p?b:this.p.n-b}else{let en=this.p.n,g=special.gammaLn(en+1),pc=1-this.c[0],pLog=Math.log(this.c[0]),pcLog=Math.log(pc),sq=Math.sqrt(2*this.c[1]*pc);let y,em,t;do{do{y=Math.tan(Math.PI*Math.random());em=sq*y+this.c[1]}while(em<0||em>=en+1)em=Math.floor(em);t=1.2*sq*(1+y*y)*Math.exp(g-special.gammaLn(em+1)-special.gammaLn(en-em+1)+em*pLog+(en-em)*pcLog)}while(Math.random()>t)return this.c[0]===this.p.p?em:this.p.n-em}}_pdf(x){let xi=parseInt(x);return xi<0?0:xi>this.p.n?0:Math.exp(special.gammaLn(this.p.n+1)-special.gammaLn(xi+1)-special.gammaLn(this.p.n-xi+1)+xi*Math.log(this.p.p)+(this.p.n-xi)*Math.log(1-this.p.p))}_cdf(x){let xi=parseInt(x);return xi<=0?0:xi>this.p.n?1:special.betaIncomplete(this.p.n-xi,1+xi,1-this.p.p)}}class BoundedPareto extends Distribution{constructor(xmin,xmax,alpha){super("continuous",arguments.length);this.p={xmin:xmin,xmax:xmax,alpha:alpha};this.c=[Math.pow(xmin,alpha),Math.pow(xmax,alpha),1-Math.pow(xmin/xmax,alpha)]}_generator(){return Math.pow((this.c[1]+Math.random()*(this.c[0]-this.c[1]))/(this.c[0]*this.c[1]),-1/this.p.alpha)}_pdf(x){return x<this.p.xmin||x>this.p.xmax?0:this.p.alpha*Math.pow(this.p.xmin/x,this.p.alpha)/(x*this.c[2])}_cdf(x){return x<this.p.xmin?0:x>this.p.xmax?1:(1-this.c[0]*Math.pow(x,-this.p.alpha))/(1-this.c[0]/this.c[1])}}class Custom extends Distribution{constructor(weights){super("discrete",arguments.length);this.p={n:weights.length,weights:weights};let n=weights.length,prob=[0],alias=[0],sum=0;if(weights.length>1){for(let i=0;i<n;i++)sum+=weights[i];let p=[],small=[],large=[];for(let i=0;i<n;i++){p.push(n*weights[i]/sum);if(p[i]<1)small.push(i);else large.push(i)}prob=[];alias=[];for(let i=0;i<n;i++){prob.push(1);alias.push(i)}let s=0,l=0;while(small.length>0&&large.length>0){s=small.shift();l=large.shift();prob[s]=p[s];alias[s]=l;p[l]+=p[s]-1;if(p[l]<1)small.push(l);else large.push(l)}while(large.length>0){l=large.shift();prob[l]=1;alias[l]=l}while(small.length>0){s=small.shift();prob[s]=1;alias[s]=s}}let pmf=[weights[0]/sum],cdf=[weights[0]/sum];for(let i=1;i<weights.length;i++){pmf.push(weights[i]/sum);cdf.push(cdf[i-1]+weights[i]/sum)}this.c=[prob,alias,pmf,cdf]}_generator(){if(this.p.n<=1){return 0}let i=Math.floor(Math.random()*this.p.n);if(Math.random()<this.c[0][i])return i;else return this.c[1][i]}_pdf(x){let xi=parseInt(x);return xi<0||xi>=this.p.weights.length?0:this.c[2][xi]}_cdf(x){let xi=parseInt(x);return xi<0?0:xi>=this.p.weights.length?1:this.c[3][xi]}}class Degenerate extends Distribution{constructor(x0){super("continuous",arguments.length);this.p={x0:x0}}_generator(){return this.p.x0}_pdf(x){return x===this.p.x0?1:0}_cdf(x){return x<this.p.x0?0:x>this.p.x0?1:.5}}class Exponential extends Distribution{constructor(lambda){super("continuous",arguments.length);this.p={lambda:lambda}}_generator(){return-Math.log(Math.random())/this.p.lambda}_pdf(x){return this.p.lambda*Math.exp(-this.p.lambda*x)}_cdf(x){return 1-Math.exp(-this.p.lambda*x)}}class Gamma extends Distribution{constructor(alpha,beta){super("continuous",arguments.length);this.p={alpha:alpha,beta:beta};this.c=[Math.pow(beta,alpha),special.gamma(alpha)]}_generator(){return _gamma(this.p.alpha,this.p.beta)}_pdf(x){return x<=0?0:this.c[0]*Math.exp((this.p.alpha-1)*Math.log(x)-this.p.beta*x)/this.c[1]}_cdf(x){return special.gammaLowerIncomplete(this.p.alpha,this.p.beta*x)/this.c[1]}}class Erlang extends Gamma{constructor(k,lambda){super(Math.round(k),lambda)}}class Chi2 extends Gamma{constructor(k){super(Math.round(k)/2,.5)}}class GeneralizedGamma extends Distribution{constructor(a,d,p){super("continuous",arguments.length);this.p={a:a,d:d,p:p};this.c=[special.gamma(d/p),p/Math.pow(a,d),1/Math.pow(a,p)]}_generator(){return Math.pow(_gamma(this.p.d/this.p.p,this.c[2]),1/this.p.p)}_pdf(x){return x<=0?0:this.c[1]*Math.exp((this.p.d-1)*Math.log(x)-Math.pow(x/this.p.a,this.p.p))/this.c[0]}_cdf(x){return special.gammaLowerIncomplete(this.p.d/this.p.p,Math.pow(x/this.p.a,this.p.p))/this.c[0]}}class InverseGamma extends Distribution{constructor(alpha,beta){super("continuous",arguments.length);this.p={alpha:alpha,beta:beta};this.c=[Math.pow(beta,alpha)/special.gamma(alpha),special.gamma(alpha)]}_generator(){return 1/_gamma(this.p.alpha,this.p.beta)}_pdf(x){return x<=0?0:this.c[0]*Math.pow(x,-1-this.p.alpha)*Math.exp(-this.p.beta/x)}_cdf(x){return 1-special.gammaLowerIncomplete(this.p.alpha,this.p.beta/x)/this.c[1]}}class Lognormal extends Distribution{constructor(mu,sigma){super("continuous",arguments.length);this.p={mu:mu,sigma:sigma};this.c=[sigma*Math.sqrt(2*Math.PI),sigma*Math.SQRT2]}_generator(){return Math.exp(this.p.mu+this.p.sigma*_normal(0,1))}_pdf(x){return x<=0?0:Math.exp(-.5*Math.pow((Math.log(x)-this.p.mu)/this.p.sigma,2))/(x*this.c[0])}_cdf(x){return x<=0?0:.5*(1+special.erf((Math.log(x)-this.p.mu)/this.c[1]))}}class Normal extends Distribution{constructor(mu,sigma){super("continuous",arguments.length);this.p={mu:mu,sigma:sigma};this.c=[sigma*Math.sqrt(2*Math.PI),sigma*Math.SQRT2]}_generator(){return _normal(this.p.mu,this.p.sigma)}_pdf(x){return Math.exp(-.5*Math.pow((x-this.p.mu)/this.p.sigma,2))/this.c[0]}_cdf(x){return.5*(1+special.erf((x-this.p.mu)/this.c[1]))}}class Pareto extends Distribution{constructor(xmin,alpha){super("continuous",arguments.length);this.p={xmin:xmin,alpha:alpha}}_generator(){return this.p.xmin/Math.pow(Math.random(),1/this.p.alpha)}_pdf(x){return x<this.p.xmin?0:this.p.alpha*Math.pow(this.p.xmin/x,this.p.alpha)/x}_cdf(x){return x<this.p.xmin?0:1-Math.pow(this.p.xmin/x,this.p.alpha)}}class Poisson extends Distribution{constructor(lambda){super("discrete",arguments.length);this.p={lambda:lambda}}_generator(){if(this.p.lambda<30){let l=Math.exp(-this.p.lambda),k=0,p=1;do{k++;p*=Math.random()}while(p>l)return k-1}else{let c=.767-3.36/this.p.lambda,beta=Math.PI/Math.sqrt(3*this.p.lambda),alpha=beta*this.p.lambda,k=Math.log(c)-this.p.lambda-Math.log(beta);while(true){let r=Math.random(),x=(alpha-Math.log((1-r)/r))/beta,n=Math.floor(x+.5);if(n<0)continue;let v=Math.random(),y=alpha-beta*x,lhs=y+Math.log(v/Math.pow(1+Math.exp(y),2)),rhs=k+n*Math.log(this.p.lambda)-special.gammaLn(n+1);if(lhs<=rhs)return n}}}_pdf(x){let xi=parseInt(x);return xi<0?0:Math.pow(this.p.lambda,xi)*Math.exp(-this.p.lambda)/special.gamma(xi+1)}_cdf(x){let xi=parseInt(x);return xi<0?0:1-special.gammaLowerIncomplete(xi+1,this.p.lambda)/special.gamma(xi+1)}}class UniformContinuous extends Distribution{constructor(xmin,xmax){super("continuous",arguments.length);this.p={xmin:xmin,xmax:xmax};this.c=[xmax-xmin]}_generator(){return Math.random()*this.c[0]+this.p.xmin}_pdf(x){return x<this.p.xmin||x>this.p.xmax?0:1/this.c[0]}_cdf(x){return x<this.p.xmin?0:x>this.p.xmax?1:(x-this.p.xmin)/this.c[0]}}class UniformDiscrete extends Distribution{constructor(xmin,xmax){super("discrete",arguments.length);this.p={xmin:xmin,xmax:xmax};this.c=[xmax-xmin+1]}_generator(){return parseInt(Math.random()*this.c[0])+this.p.xmin}_pdf(x){let xi=parseInt(x);return xi<this.p.xmin||xi>this.p.xmax?0:1/this.c[0]}_cdf(x){let xi=parseInt(x);return xi<this.p.xmin?0:xi>this.p.xmax?1:(1+xi-this.p.xmin)/this.c[0]}}class Weibull extends Distribution{constructor(lambda,k){super("continuous",arguments.length);this.p={lambda:lambda,k:k}}_generator(){return this.p.lambda*Math.pow(-Math.log(Math.random()),1/this.p.k)}_pdf(x){return x<0?0:this.p.k/this.p.lambda*Math.exp((this.p.k-1)*Math.log(x/this.p.lambda)-Math.pow(x/this.p.lambda,this.p.k))}_cdf(x){return x<0?0:1-Math.exp(-Math.pow(x/this.p.lambda,this.p.k))}}return{Bernoulli:Bernoulli,Beta:Beta,Binomial:Binomial,BoundedPareto:BoundedPareto,Chi2:Chi2,Custom:Custom,Degenerate:Degenerate,Erlang:Erlang,Exponential:Exponential,Gamma:Gamma,GeneralizedGamma:GeneralizedGamma,InverseGamma:InverseGamma,Lognormal:Lognormal,Normal:Normal,Pareto:Pareto,Poisson:Poisson,UniformContinuous:UniformContinuous,UniformDiscrete:UniformDiscrete,Weibull:Weibull}}();let stat=function(){class Cov{constructor(dimension=1){this.dim=dimension;this.n=0;this.x=new Array(this.dim).fill(0);this.xy=Array.from({length:this.dim},()=>new Array(this.dim).fill(0))}reset(){this.n=0;this.x=new Array(this.dim).fill(0);this.xy=Array.from({length:this.dim},()=>new Array(this.dim).fill(0))}update(x){this.x=this.x.map((d,i)=>(this.n*d+x[i])/(this.n+1));this.xy=this.xy.map((row,i)=>row.map((d,j)=>(this.n*d+x[i]*x[j])/(this.n+1)));this.n++}compute(){return new linalg.Matrix(this.xy.map((row,i)=>row.map((d,j)=>d-this.x[i]*this.x[j])))}}class AC{constructor(dimension=1,range=100,maxSize=1e4){this.dim=dimension;this.range=range;this.maxSize=maxSize;this.history=Array.from({length:dimension},()=>[])}_aci(h){let m=h.reduce((s,d)=>s+d)/h.length,m2=h.reduce((s,d)=>s+d*d),rho=new Array(this.range).fill(0);for(let i=0;i<h.length;i++){for(let r=0;r<rho.length;r++){if(i-r>0){rho[r]+=(h[i]-m)*(h[i-r]-m)}}}return rho.map(function(d){return d/(m2-h.length*m*m)})}reset(){this.history=Array.from({length:this.dim},()=>[])}update(x){this.history.forEach((d,i)=>d.push(x[i]));if(this.history[0].length>=this.maxSize){this.history.forEach(d=>d.shift())}}compute(){return this.history.map(d=>this._aci(d))}}return{Cov:Cov,AC:AC}}();let mc=function(){const _MAX_HISTORY=1e4;let gr=function(){function _gri(samples,dim){let m=[],s=[];samples.forEach(function(d){let di=d.map(function(x){return x[dim]});let mi=_sum(di)/di.length,si=(_sum(di,2)-di.length*mi*mi)/(di.length-1);m.push(mi);s.push(si)});let w=_sum(s)/samples.length,mm=_sum(m)/samples.length,b=(_sum(m,2)-samples.length*mm*mm)*samples[0].length/(samples.length-1),v=((samples[0].length-1)*w+b)/samples[0].length;return Math.sqrt(v/w)}return function(samples,maxLength){return samples[0][0].map(function(s,j){return new Array(maxLength||1e3).fill(0).map(function(d,i){return _gri(samples.map(function(dd){return dd.slice(0,i+2)}),j)})})}}();let Slice=function(logDensity,config){let _min=config&&typeof config.min!=="undefined"?config.min:null,_max=config&&typeof config.max!=="undefined"?config.max:null,_x=Math.random(),_e=new dist.Exponential(1);function _boundary(x){return(!_min||x>=_min[0])&&(!_max||x>=_max[0])}function _accept(x,z,l,r){let L=l,R=r,D=false;while(R-L>1.1){let M=(L+R)/2;D=_x<M&&x>=M||_x>=M&&x<M;if(x<M){R=M}else{L=M}if(D&&z>=logDensity(L)&&z>=logDensity(R)){return false}}return true}function _iterate(){let z=logDensity(_x)-_e.sample(),L=_x-Math.random(),R=L+1;while(z<logDensity(L)||z<logDensity(R)){if(Math.random()<.5){L-=R-L}else{R+=R-L}}let x=_r(L,R);while(!_boundary(x)||z>logDensity(x)||!_accept(x,z,L,R)){if(x<_x){L=x}else{R=x}x=_r(L,R)}_x=x;return _x}function burnIn(){return null}function sample(size){return new Array(size||1e6).fill(0).map(function(){return[_iterate()]})}return{burnIn:burnIn,sample:sample}};class MCMC{constructor(logDensity,config={},initialState={}){this.dim=config.dim||1;this.maxHistory=config.maxHistory||_MAX_HISTORY;this.lnp=logDensity;this.x=initialState.x||Array.from({length:self.dim},Math.random);this.samplingRate=initialState.samplingRate||1;this.internal=initialState.internal||{};this.history=function(self){let _arr=Array.from({length:self.dim},()=>[]);return{get(){return _arr},update(x){_arr.forEach((d,j)=>d.push(x[j]));if(_arr[0].length>=self.maxHistory){_arr.forEach(d=>d.shift())}}}}(this);this.acceptance=function(self){let _arr=[];return{compute(){return _sum(_arr)/_arr.length},update(a){_arr.push(a);if(_arr.length>self.maxHistory){_arr.shift()}}}}(this)}_internal(){throw Error("MCMC._internal() is not implemented")}_iter(x,warmUp=false){throw Error("MCMC._iter() is not implemented")}_adjust(i){throw Error("MCMC._adjust() is not implemented")}state(){return{x:this.x,samplingRate:this.samplingRate,internals:this._internal()}}statistics(){return this.history.get().map(h=>{let m=h.reduce((sum,d)=>sum+d,0)/h.length,s=h.reduce((sum,d)=>sum+(d-m)*(d-m),0)/h.length;return{mean:m,std:s,cv:s/m}})}ar(){return this.acceptance.compute()}ac(){return this.history.get().map(h=>{let m=h.reduce((s,d)=>s+d)/h.length,m2=h.reduce((s,d)=>s+d*d),rho=new Array(100).fill(0);for(let i=0;i<h.length;i++){for(let r=0;r<rho.length;r++){if(i-r>0){rho[r]+=(h[i]-m)*(h[i-r]-m)}}}return rho.map(function(d){return d/(m2-h.length*m*m)})})}iterate(callback=null,warmUp=false){let i=this._iter(this.state.x,warmUp);this.history.update(i.x);this.acceptance.update(i.accepted);this.x=i.x;callback&&callback(i.x,i.accepted);return i}warmUp(callback,maxBatches=100){for(let batch=0;batch<=maxBatches;batch++){for(let j=0;j<1e4;j++){this._adjust(this.iterate(null,true))}let z=this.ac().reduce((first,d)=>{for(let i=0;i<d.length-1;i++){if(Math.abs(d[i])<=.05){return Math.max(first,i)}}},0);if(z>this.samplingRate){this.samplingRate++}else if(z<this.samplingRate&&this.samplingRate>1){this.samplingRate--}callback&&callback(100*batch/maxBatches)}}sample(callback,size=1e3){let iMax=this.samplingRate*size,batchSize=iMax/100,samples=[];for(let i=0;i<iMax;i++){this.iterate();if(i%batchSize===0){callback&&callback(i/batchSize)}if(i%this.samplingRate===0){samples.push(this.x)}}return samples}}class RWM extends MCMC{constructor(logDensity,config,initialState){super(logDensity,config,initialState);this.lastLnp=this.lnp(this.x);this.proposal=function(self){let _q=new dist.Normal(0,1),_acceptance=new Array(self.dim).fill(0),_sigma=self.internal.proposal||new Array(self.dim).fill(1),_ls=_sigma.map(d=>Math.log(d)),_n=0,_batch=0,_index=0;return{jump(x,single){return single?x.map((d,i)=>d+(i===_index?_q.sample()*_sigma[_index]:0)):x.map((d,i)=>d+_q.sample()*_sigma[i])},update(accepted){accepted&&_acceptance[_index]++;_n++;if(_n===100){if(_acceptance[_index]/100>.44){_ls[_index]+=Math.min(.01,Math.pow(_batch,-.5))}else{_ls[_index]-=Math.min(.01,Math.pow(_batch,-.5))}_sigma[_index]=Math.exp(_ls[_index]);_n=0;_acceptance[_index]=0;_index=(_index+1)%self.dim;if(_index===0){_batch++}}},scales(){return _sigma.slice()}}}(this)}_internal(){return{proposal:this.proposal.scales()}}_iter(x,warmUp){let x1=this.proposal.jump(this.x,warmUp);let newLnp=this.lnp(x1),accepted=Math.random()<Math.exp(newLnp-this.lastLnp);if(accepted){this.lastLnp=newLnp}else{x1=this.x}return{x:x1,accepted:accepted}}_adjust(i){this.proposal.update(i.accepted)}}return{gr:gr,RWM:RWM}}();exports.special=special;exports.stat=stat;exports.linalg=linalg;exports.core=core;exports.dist=dist;exports.mc=mc});