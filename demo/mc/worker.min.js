function beta(n,t){return n.length/n.reduce((n,e)=>{return n+Math.pow(e.y-t(e.x),2)},0)}self.addEventListener("message",function(n){"use strict";importScripts("../../../ran.min.js","../../d3.v4.min.js");const t=1e4;const e=10;const s=1e4;const a=44125;const r=n.data.model;const o=new ran.dist[r](...n.data.params);const i=o.sample(t).filter(n=>n>2&&n<7);const c=Object.entries(i.reduce((n,t)=>{let e=Math.floor(10*t)/10;if(!n[e]){n[e]=1}else{n[e]++}return n},{})).map(n=>({x:+n[0],y:a*e*n[1]/t})).sort((n,t)=>n.x-t.x);postMessage({type:"generate",res:c});const u=beta(c,n=>a*o.pdf(n));const p=function(n){const t=new ran.dist[r](...n);return-.5*u*c.reduce((n,e)=>{return n+Math.pow(e.y-a*t.pdf(e.x),2)},0)};const f=new ran.mc.RWM(p,{dim:n.data.params.length},{x:n.data.params});f.warmUp(n=>{postMessage({type:"burn-in",res:n})},100);let d=f.sample(n=>{postMessage({type:"sampling",res:n})},s);let m=d.map(n=>new ran.dist[r](...n));let l=new Array(1e3).fill(0).map((n,t)=>{let e=m.map(n=>{return a*n.pdf(t/100)}).sort((n,t)=>n-t);let s=d3.mean(e);let r=d3.quantile(e,.001);let o=d3.quantile(e,.999);return{x:t/100,y:s,lo:s-r,hi:o-s}});postMessage({type:"fit",res:l})});>0){setTimeout(u,20);o--}};u()});