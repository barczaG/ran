function collect(n,t){Object.entries(n.reduce(function(n,t){let e=Math.floor(t[0]);if(!n.hasOwnProperty(e)){n[e]=1}else{n[e]++}return n},{})).forEach(function(n){if(!t.hasOwnProperty(n[0])){t[n[0]]=n[1]}else{t[n[0]]+=n[1]}})}function send(n,t){if(!this.diff){this.diff=[]}this.diff.push(t.map(function(t,e){return n[e]?Math.abs(t.y-n[e].y):0}).reduce(function(n,t){return n+t},0));postMessage({p:[{name:"real",values:n},{name:"estimate",values:t}],d:[{name:"diff",values:this.diff.map(function(n,t){return{x:Math.log(t+1),y:Math.log(n)}})}]})}self.addEventListener("message",function(n){"use strict";importScripts("../../ran.min.js");const t=.3;const e=1e3;const i=function(n){return t*new ran.dist.Weibull(10,2).pdf(n)+(1-t)*new ran.dist.Normal(60,20).pdf(n)};const r=new ran.mc.Metropolis(function(n){return Math.log(i(n))},{min:[0]});r.burnIn(null,20);let s=0;let a=0;let u={};let f=100;let o=function(){let n=r.sample(e);a+=n.length;s=Math.max(s,n.reduce(function(n,t){n=Math.max(n,t);return n},0));collect(n,u,a);send(new Array(Math.ceil(s+10)).fill(0).map(function(n,t){return{x:t-.5,y:i(t)}}),Object.entries(u).map(function(n){return{x:+n[0],y:n[1]/a}}));if(f>0){setTimeout(o,20);f--}};o()});