const utils=require("../test/test-utils").test_utils;const dist=require("../src/ran").dist;const LAPS=1e3;const MAX_AVG_DIFF=.001;const GENERATORS={Bernoulli:{g:function(){return new dist.Bernoulli(utils.param.prob())}},Beta:{g:function(){return new dist.Beta(utils.param.scale(),utils.param.scale())}},Binomial:{g:function(){return new dist.Binomial(parseInt(utils.param.scale()*100),utils.param.prob())}},BoundedPareto:{g:function(){const t=utils.param.scale();return new dist.BoundedPareto(t,t+utils.param.scale(),utils.param.shape())}},Chi2:{g:function(){return new dist.Chi2(utils.param.degree())}},Erlang:{g:function(){return new dist.Erlang(utils.param.degree(),utils.param.rate())}},Exponential:{g:function(){return new dist.Exponential(utils.param.rate())}},Gamma:{g:function(){return new dist.Gamma(utils.param.shape(),utils.param.rate())}},GeneralizedGamma:{g:function(){return new dist.GeneralizedGamma(utils.param.rate(),utils.param.shape(),utils.param.scale())}},InverseGamma:{g:function(){return new dist.InverseGamma(utils.param.shape(),utils.param.scale())}},Lognormal:{g:function(){return new dist.Lognormal(utils.param.scale(),utils.param.shape())}},Normal:{g:function(){return new dist.Normal(utils.param.scale(),utils.param.shape())}},Pareto:{g:function(){return new dist.Pareto(utils.param.scale(),utils.param.shape())}},Poisson:{g:function(){return new dist.Poisson(utils.param.rate()*10)}},UniformContinuous:{g:function(){const t=utils.param.scale();return new dist.UniformContinuous(t,t+utils.param.rate())}},UniformDiscrete:{g:function(){const t=parseInt(utils.param.scale()*40);return new dist.UniformDiscrete(t,t+parseInt(50*utils.param.scale()))}},Weibull:{g:function(){return new dist.Weibull(utils.param.scale(),utils.param.shape())}}};describe("ran",function(){describe("dist",function(){describe("bernoulli",function(){it("should return an array of Bernoulli distributed values",function(){utils.trials(function(){const t=GENERATORS.Bernoulli.g();return utils.chi_test(t.sample(LAPS),n=>t.pdf(n),1)})});it("sum of pmf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Bernoulli.g();return utils.diff_disc(n=>t.pdf(n),n=>t.cdf(n),0,1)<MAX_AVG_DIFF})})});describe("beta",function(){it("should return an array of beta distributed values",function(){utils.trials(function(){const t=GENERATORS.Beta.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Beta.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,1,.01)<MAX_AVG_DIFF})})});describe("binomial",function(){it("should return an array of binomial distributed values",function(){utils.trials(function(){const t=GENERATORS.Binomial.g();return utils.chi_test(t.sample(LAPS),n=>t.pdf(n),2)})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Binomial.g();return utils.diff_disc(n=>t.pdf(n),n=>t.cdf(n),0,100)<MAX_AVG_DIFF})})});describe("boundedPareto",function(){it("should return an array of bounded Pareto distributed values",function(){utils.trials(function(){const t=GENERATORS.BoundedPareto.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.BoundedPareto.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.01)<MAX_AVG_DIFF})})});describe("chi2",function(){it("should return an array of chi square distributed values",function(){utils.trials(function(){const t=GENERATORS.Chi2.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Chi2.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.01)<MAX_AVG_DIFF})})});describe("custom",function(){it("should return an array of custom distributed values",function(){utils.trials(function(){const t=parseInt(Math.random()*5+3);let n=[];for(let i=0;i<t;i++){let t=Math.random()*10;n.push(t)}const i=new dist.Custom(n);return utils.chi_test(i.sample(LAPS),t=>i.pdf(t),t-1)})});it("sum of pmf should give cdf",function(){utils.trials(function(){const t=parseInt(Math.random()*5+3);let n=[];for(let i=0;i<t;i++){let t=Math.random()*10;n.push(t)}const i=new dist.Custom(n);return utils.diff_disc(t=>i.pdf(t),t=>i.cdf(t),0,n.length)<MAX_AVG_DIFF})})});describe("erlang",function(){it("should return an array of Erlang distributed values",function(){utils.trials(function(){const t=GENERATORS.Erlang.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Erlang.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.01)<MAX_AVG_DIFF})})});describe("exponential",function(){it("should return an array of exponentially distributed values",function(){utils.trials(function(){const t=GENERATORS.Exponential.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Exponential.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.01)<MAX_AVG_DIFF})})});describe("gamma",function(){it("should return an array of gamma distributed values",function(){utils.trials(function(){const t=GENERATORS.Gamma.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Gamma.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.1)<MAX_AVG_DIFF})})});describe("generalizedGamma",function(){it("should return an array of generalized gamma distributed values",function(){utils.trials(function(){const t=GENERATORS.GeneralizedGamma.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.GeneralizedGamma.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.1)<MAX_AVG_DIFF})})});describe("inverseGamma",function(){it("should return an array of inverse-gamma distributed values",function(){utils.trials(function(){const t=GENERATORS.InverseGamma.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.InverseGamma.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.1)<MAX_AVG_DIFF})})});describe("lognormal",function(){it("should return an array of log-normally distributed values",function(){utils.trials(function(){const t=GENERATORS.Lognormal.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Lognormal.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,5,.01)<MAX_AVG_DIFF})})});describe("normal",function(){it("should return an array of normally distributed values",function(){utils.trials(function(){const t=GENERATORS.Normal.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Normal.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),-100,100,.1)<MAX_AVG_DIFF})})});describe("pareto",function(){it("should return an array of Pareto distributed values",function(){utils.trials(function(){const t=GENERATORS.Pareto.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Pareto.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.1)<MAX_AVG_DIFF})})});describe("poisson",function(){it("should return an array of Poisson distributed values",function(){utils.trials(function(){const t=GENERATORS.Poisson.g();return utils.chi_test(t.sample(LAPS),n=>t.pdf(n),1)})});it("sum of pmf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Poisson.g();return utils.diff_disc(n=>t.pdf(n),n=>t.cdf(n),0,100)<MAX_AVG_DIFF})})});describe("uniform continuous",function(){it("should return an array of uniformly distributed values",function(){utils.trials(function(){const t=GENERATORS.UniformContinuous.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.UniformContinuous.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),-100,100,.1)<MAX_AVG_DIFF})})});describe("uniform discrete",function(){it("should return an array of Poisson distributed values",function(){utils.trials(function(){const t=GENERATORS.UniformDiscrete.g();return utils.chi_test(t.sample(LAPS),n=>t.pdf(n),1)})});it("sum of pmf should give cdf",function(){utils.trials(function(){const t=GENERATORS.UniformDiscrete.g();return utils.diff_disc(n=>t.pdf(n),n=>t.cdf(n),0,100)<MAX_AVG_DIFF})})});describe("weibull",function(){it("should return an array of Weibull distributed values",function(){utils.trials(function(){const t=GENERATORS.Weibull.g();return utils.ks_test(t.sample(LAPS),n=>t.cdf(n))})});it("integral of pdf should give cdf",function(){utils.trials(function(){const t=GENERATORS.Weibull.g();return utils.diff_cont(n=>t.pdf(n),n=>t.cdf(n),0,10,.01)<MAX_AVG_DIFF})})})})});